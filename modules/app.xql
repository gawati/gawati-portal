xquery version "3.1";

module namespace app="http://gawati.org/xq/portal/app";

declare namespace gwd="http://gawati.org/ns/1.0/data";
declare namespace xh = "http://www.w3.org/1999/xhtml";
declare namespace gsc = "http://gawati.org/portal/services";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://gawati.org/xq/portal/config" at "config.xqm";
import module namespace docread="http://gawati.org/xq/portal/doc/read" at "docread.xql";
import module namespace utils="http://gawati.org/xq/portal/utils" at "utils.xql";
import module namespace langs="http://gawati.org/xq/portal/langs" at "langs.xql";
import module namespace render="http://gawati.org/xq/portal/render" at "render.xql";
(:
 : This module provides UI facing end-points. 
 : All retrieval functionality is called from here
 :)


(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute data-template="app:test" 
 : or class="app:test" (deprecated). The function has to take at least 2 default
 : parameters. Additional parameters will be mapped to matching request or session parameters.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

declare
%private
function local:thumbnail-url($is-present as xs:string, $e-iri as xs:string) {
    let $svc := config:service-config(
        "gawati-data-server", 
        "thumbnail-image"
    )
    return
        if ($is-present eq 'true') then
            $svc("base-url") || 
            $svc("service")/@end-point ||
            "?iri=" || $e-iri
        else
            "resources/images/no.png"
};

declare 
%templates:wrap
function app:docs-summary($node as node(), $model as map(*)) {
    let $docs := docread:recent-docs()
    let $abstrs := $docs//gwd:exprAbstracts/gwd:exprAbstract
    return
    <xh:section class="col-xs-8 col-sm-10 col-md-12" style="margin-top:5px;"> {
    (: Read each extract herer and render as an article :)
    for $abstr in $abstrs
        (: build a map here to pass to the renderer API :)
         let $o := map {
            "e-iri" := $abstr/@expr-iri,
            "w-iri" := $abstr/@work-iri,
            "e-date" := utils:show-date($abstr/gwd:date[@name = 'expression']/@value),
            "w-date" := utils:show-date($abstr/gwd:date[@name = 'work']/@value),
            "w-country" := $abst/gwd:country/@value,
            "e-lang" := langs:lang3-name($abstr/gwd:language/@value),
            "w-num" := data($abstr/gwd:number/@showAs),
            "pub-as" := data($abstr/gwd:publishedAs/@showAs),
            (: generate a URL to the thumbnail :)
            "th-url" := local:thumbnail-url(
                data($abstr/gwd:thumbnailPresent/@value), 
                $abstr/@expr-iri
             ),
            "e-url" := "./document/iri/expr" || $abstr/@expr-iri
        }
        return
            render:exprAbstract($o)
    }
    </xh:section>

};

declare 
%templates:wrap
function app:works-summary($node as node(), $model as map(*)) {
    docread:recent-works()
};

